%{
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 *    Copyright 2023-2024 (c) Fraunhofer IOSB (Author: Florian DÃ¼wel)
 *    Copyright 2024 (c) Fraunhofer IOSB (Author: Julius Pfrommer)
 */

#include <open62541/util.h>
#include "ua_eventfilter_parser.h"

/*
 *  Lexing and parsing of OPC UA eventfilter. These are helper functions that
 *  are not required by the SDk internally. But they are useful for users who want to create
 *  eventfilter from human readable strings.
 *
 *  This compilation unit uses the leg parser generators (https://www.piumarta.com/software/peg/peg.1.html).
 *  The final C source is generated with the following script:
 *
 *  leg -Po ua_eventfilter_grammar.c ua_eventfilter_grammar.leg
 *
 *  However, the generated eventfilter_parser_grammar.c file creates some compiler warnings.
 *  Here is an Explanation on how to remove these warnings:
 *  windows build:
 *
 *   1 #define YY_INPUT(yyctx, buf, result, max_size) \
 *   2 {                                              \
 *   3  if(yyctx->input.length <= yyctx->pos) {      \
 *   4      result = 0;                              \
 *   5  } else {                                     \
 *   6      result = ((int) yyctx->input.length) - yyctx->pos;\
 *   7      if(result > max_size)                     \
 *   8          result = max_size;                   \
 *   9      memcpy(buf, &yyctx->input.data[yyctx->pos], result); \
 *   10      yyctx->pos += result;                    \
 *   11  }                                            \
 *   12}
 *   replace: yyctx->input.length with  ((int) yyctx->input.length) in line 6
 *
 *   13 YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
 *   14 {
 *   15   yy->__val += count;
 *   16   while (yy->__valslen <= yy->__val - yy->__vals)
 *   17     {
 *   18       long offset= (long)( yy->__val - yy->__vals);
 *   19       yy->__valslen *= 2;
 *   20       yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
 *   21       yy->__val= yy->__vals + offset;
 *   22     }
 *   23 }
 *   replace: long offset= yy->__val - yy->__vals; with long offset= (long)( yy->__val - yy->__vals); in line 18
 *
 *   linux build:
 *
 *   replace YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart) with YY_PARSE(static int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
 *   replace YY_PARSE(int) YYPARSE(YY_CTX_PARAM) with YY_PARSE(static int) YYPARSE(YY_CTX_PARAM)
 *   replace YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx) with YY_PARSE(static yycontext *) YYRELEASE(yycontext *yyctx)
 *
 *   remove:
 *   YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
 *   {
 *     if (tp0)
 *       {
 *         fprintf(stderr, "accept denied at %d\n", tp0);
 *         return 0;
 *       }
 *     else
 *       {
 *         yyDone(yy);
 *         yyCommit(yy);
 *       }
 *     return 1;
 *   }
 *
 *  In order that users of the SDK don't need to use the leg parser, always commit a recent
 *  eventfilter_parser_grammar.c if changes are made to the lexer.
 */

#define YY_CTX_LOCAL 1
#define YY_CTX_MEMBERS                  \
    UA_StatusCode status;               \
    UA_String input;                    \
    UA_UInt32 pos;                      \
    OperandList global;                 \
    Operand *top;

#define YY_INPUT(yyctx, buf, result, max_size) \
{                                              \
  if(yyctx->input.length <= yyctx->pos)  {      \
      result = 0;                              \
  } else {                                     \
      result = yyctx->input.length - yyctx->pos;\
      if(result > max_size)                     \
          result = max_size;                   \
      memcpy(buf, &yyctx->input.data[yyctx->pos], result); \
      yyctx->pos += result;                    \
  }                                            \
}

#define YYSTYPE Operand *

%}

EventFilter  = _ SelectClause _ (WhereClause _)? (ForClause _)? !.
SelectClause = 'SELECT' _ sao:Operand  _ {append_select(&yy->global, sao)} (',' _ sao2:Operand _ {append_select(&yy->global, sao2)} )*
WhereClause  = 'WHERE'  _ (t:Operator | t:RefOperand) {yy->top = t}
ForClause    = 'FOR'    _ RefAssignment _ ('AND' _ RefAssignment _)*

Operand  = '(' _ Operand _ ')' | RefOperand | Literal | Operator | SimpleAttributeOperand
Operator = UnaryOperator | BinaryOperator | BetweenOperator | InListOperator

UnaryFilter = ('NOT' | '!') {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_NOT)}
            |  'ISNULL'     {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_ISNULL)}
            |  'OFTYPE'     {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_OFTYPE)}
UnaryOperator = filter:UnaryFilter _ '(' _ op1:Operand _ ')' {$$ = filter; append_operand(&$$->operand.op, op1)}

BinaryFilter = ( 'LIKE'         | '<=>') {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_LIKE)}
             | ( 'GREATEREQUAL' | '>=')  {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_GREATERTHANOREQUAL)}
             | ( 'LESSEQUAL'    | '<=')  {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_LESSTHANOREQUAL)}
             | ( 'EQUAL'        | '==')  {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_EQUALS)}
             | ( 'GREATER'      | '>')   {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_GREATERTHAN)}
             | ( 'LESS'         | '<')   {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_LESSTHAN)}
             | ( 'CAST'         | '->')  {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_CAST)}
             | ( 'OR'           | '||')  {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_OR)}
             | ( 'AND'          | '&&')  {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_AND)}
             | ( 'BITAND'       | '&')   {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_BITWISEAND)}
             | ( 'BITOR'        | '|')   {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_BITWISEOR)}
BinaryOperator = filter:BinaryFilter _ '(' _ op1:Operand ',' _ op2:Operand _ ')'
    {$$ = filter; append_operand(&$$->operand.op, op1); append_operand(&$$->operand.op, op1)}

BetweenOperator = 'BETWEEN' _ op1:Operand _ '[' _ op2:Operand _  "," _  op3:Operand _ ']'
    {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_BETWEEN); append_operand(&$$->operand.op, op1);
     append_operand(&$$->operand.op, op2); append_operand(&$$->operand.op, op3)}

InListOperator  = {$$ = create_operator(&yy->global, UA_FILTEROPERATOR_INLIST)}
    'INLIST' _ op1:Operand _  '[' _ {append_operand(&$$->operand.op, op1)}
        (op2: Operand _             {append_operand(&$$->operand.op, op2)}
            (',' _ op3:Operand _    {append_operand(&$$->operand.op, op3)} )* )? _ ']'     

SimpleAttributeOperand = < NodeId? Path? Attribute? NumericRange? >
    {$$ = create_operand(&yy->global, OT_SAO);
     yy->status |= UA_SimpleAttributeOperand_parse(&$$->operand.sao, UA_STRING(yytext))}

Literal =   'INT32' _ <"-"? [0-9]+>                                  {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_INT32])}
        | 'STRING' _ <QuotedString>                                  {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_STRING])}
        | 'BOOL' _  <('true' | 'True' | 'false' | 'False' | [0-1])>  {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_BOOLEAN])}
        | 'INT16' _  <"-"? [0-9]+>                                   {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_INT16])}
        | 'INT64' _  <"-"? [0-9]+>                                   {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_INT64])}
        | 'UINT16' _  <[0-9]+>                                       {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_UINT16])}
        | 'UINT32' _  <[0-9]+>                                       {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_UINT32])}
        | 'UINT64' _  <[0-9]+>                                       {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_UINT64])}
        | 'DOUBLE' _  <("-")? [0-9]+ ('.' [0-9]+)? >                 {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_DOUBLE])}
        | 'FLOAT' _  <("-")? [0-9]+ ('.' [0-9]+)?>                   {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_FLOAT])}
        | 'NODEID' _  <NodeId>                                       {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_NODEID])}
        | 'SBYTE' _  <"-"? [0-9]+>                                   {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_SBYTE])}
        | 'BYTE' _  <[0-9]+>                                         {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_BYTE])}
        | 'TIME' _ ('"' <("-" | [0-9] | [a-zA-Z] | "." | ":")+> '"') {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_DATETIME])}
        | 'GUID' _ <([a-zA-Z_] | [0-9] | "-")+>                      {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_GUID])}
        | 'BSTRING' _ <QuotedString>                                 {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_BYTESTRING])}
        | 'STATUSCODE' _  <([a-zA-Z_] | [0-9])+>                     {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_STATUSCODE])}
        | 'EXPNODEID' _  <QuotedString>                              {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_EXPANDEDNODEID])}
        | 'QNAME' _ <QualifiedName>                                  {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_QUALIFIEDNAME])}
        | 'LOCALIZED' _ <QuotedString>                               {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_LOCALIZEDTEXT])}
        | <JsonObject>                                               {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_VARIANT])}
        | <QuotedString>                                             {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_STRING])}
        | <"-"? [0-9]+>                                              {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_INT32])}
        | <('true' | 'True' | 'false' | 'False')>                    {$$ = parse_literal(&yy->global, yytext, &UA_TYPES[UA_TYPES_BOOLEAN])}

Ref           = '$' [a-zA-Z][a-zA-Z0-9_]*
RefOperand    = <Ref>                            {$$ = create_operand(&yy->global, OT_REF); $$->operand.ref = save_string(yytext)}
RefAssignment = r:RefOperand _ ':=' _ op:Operand {op->ref = save_string(r->operand.ref)}

NodeId = ('ns=' [0-9]+ ';')? ( 'i=' [0-9]+ | 's=' EscapedString | 'g=' [a-zA-Z0-9-]+ | 'b=' [a-zA-Z_0-9=]+ )

JsonObject  = '{' _ (JsonElement _ ',' _ )* JsonElement _ '}'
JsonArray   = '[' _ (JsonValue   _ ',' _ )* JsonValue   _ ']'
JsonElement = QuotedString _ ':' _ JsonValue
JsonValue   = JsonArray | QuotedString | [0-9]+ | 'true' | 'false' | 'null'

Attribute     = '#' [a-zA-Z]+
EscapedString = ( '&' . | ![/.<>:#!& ,()\[\] \t\n\v\f\r] . )+
QualifiedName = ([0-9]+ ':')? EscapedString
Path          = '/' QualifiedName ('/' QualifiedName)*
NumericRange  = '[' [0-9,:]+ ']'
QuotedString  = '"' ( '\\\"' | !["] . )* '"'
Space   = (' ' | '\t' | Enter)*
Comment = ('#' (!Enter .)* Enter | '/*' (![*/] . | '/')* '*/')
Enter   = '\r\n' | '\n' | '\r'
_       = Space | Comment

%%

UA_StatusCode
UA_EventFilter_parse(UA_EventFilter *filter, UA_ByteString *content) {
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    TAILQ_INIT(&ctx.global.select_list);
    ctx.input = *content;
    int res = yyparse(&ctx);
    if(res == 0)
        ctx.status = UA_STATUSCODE_BADINTERNALERROR;
    if(ctx.status != UA_STATUSCODE_GOOD) {
        yyrelease(&ctx);
        OperandList_clear(&ctx.global);
        return ctx.status;
    }

    UA_EventFilter_init(filter);
    ctx.status = create_filter(&ctx.global, filter, ctx.top);
    yyrelease(&ctx);
    OperandList_clear(&ctx.global);
    if(ctx.status != UA_STATUSCODE_GOOD)
        UA_EventFilter_clear(filter);
    return ctx.status;
}